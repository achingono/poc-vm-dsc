# This workflow deploys the full solution

name: Provision Infrastructure

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - develop
      - 'features/*'
    paths:
      - 'iac/**'
env:
  VERSION-PREFIX: 1.0
  CONFIG_PACKAGE: ServerConfiguration
  DEPLOY_PACKAGE: WebDeploy

jobs:

  environment:
    name: Determine Environment Name
    uses: ./.github/workflows/environment.yaml     

  validate:
    needs: [environment]
    name: Validate Environment Configuration
    uses: ./.github/workflows/validate.yaml
    with:
      environment: ${{ needs.environment.outputs.name }}
    secrets: 
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  package:
    needs: [validate]
    name: Create Packages
    runs-on: windows-latest
    environment: 
      name: ${{ needs.environment.outputs.name }}
    env:
      PACKAGE_PATH: .\package
      SITE_PATH: .\src
      DSC_PATH: .\dsc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Create Package Folder
      run: |
        mkdir ${{ env.PACKAGE_PATH }}

    - name: Compile DSC Configuration
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module PSDesiredStateConfiguration
        Install-Module xWebAdministration
        Install-Module Az.Compute -AllowClobber -Force

        $archivePath = Join-Path -Path ${{ env.PACKAGE_PATH }} -ChildPath "${{ env.CONFIG_PACKAGE }}.zip";

        Publish-AzVMDscConfiguration (Join-Path -Path ${{ env.DSC_PATH }} -ChildPath "${{ env.CONFIG_PACKAGE }}.ps1") `
            -OutputArchivePath $archivePath;

        if (-not (Test-Path -Path $archivePath)) {
          throw "Compilation failed or no output was created"
        }

    - name: Create WebDeploy Package
      run: |
        # Get MSDeploy path
        $msdeploy = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe";

        # Create WebDeploy package
        & $msdeploy '-verb:sync' `
              "-source:iisApp=$((Get-Item ${{ env.SITE_PATH }}).FullName),includeAcls=false,enable32BitAppOnWin64=false,managedPipelineMode=Integrated,managedRuntimeVersion=v4.0" `
              "-declareParamFile:$((Get-Item ${{ env.SITE_PATH }}).FullName)\parameters.xml" `
              "-dest:package=$((Get-Item ${{ env.PACKAGE_PATH }}).FullName)\${{ env.DEPLOY_PACKAGE }}.zip";

    - name: Upload Package as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: ${{ env.PACKAGE_PATH }}\*

  upload:
    needs: [environment, package]
    name: Upload Packages
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.environment.outputs.name }}
    env:
      PACKAGE_PATH: ./package
      DEPLOY_CONTAINER: deployments
      CONFIG_CONTAINER: configurations
      RESOURCE_GROUP: rg-${{ vars.AZURE_NAME }}-${{ vars.AZURE_SUFFIX }}-${{ vars.AZURE_LOCATION }}
      LOCATION: ${{ vars.AZURE_LOCATION }}
      STORAGE_ACCOUNT: stg${{ vars.AZURE_NAME }}${{ vars.AZURE_SUFFIX }}

    steps:
      - uses: actions/checkout@v2   
      - name: Download Package
        uses: actions/download-artifact@v2
        with:
          name: Package
          path: ${{ env.PACKAGE_PATH }}/

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # Create resource group if it does not exist
            az group create \
                --name $RESOURCE_GROUP \
                --location $LOCATION

      - name: Create Storage Account
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # remove invalid characters from storage account
            STORAGE_ACCOUNT=$(echo $STORAGE_ACCOUNT | tr -d -c 'a-z0-9')

            # Check if the storage account exists
            accountExists=$(az storage account list --resource-group $RESOURCE_GROUP --query "[?name=='$STORAGE_ACCOUNT'].name" -o tsv)

            # Create storage account if it does not exist
            if [ -z "$accountExists" ]; then
              az storage account create \
                  --name $STORAGE_ACCOUNT \
                  --resource-group $RESOURCE_GROUP \
                  --location $LOCATION \
                  --sku Standard_LRS \
                  --kind StorageV2 \
                  --access-tier Hot \
                  --default-share-permission None
            else
                echo "The storage account '$STORAGE_ACCOUNT' already exists in the resource group '$RESOURCE_GROUP'."
            fi

      - name: Create Blob Containers
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # remove invalid characters from storage account
            STORAGE_ACCOUNT=$(echo $STORAGE_ACCOUNT | tr -d -c 'a-z0-9')

            # Create blob containers if they do not exist
            az storage container create \
                --account-name $STORAGE_ACCOUNT \
                --name $CONFIG_CONTAINER \
                --public-access off

            az storage container create \
                --account-name $STORAGE_ACCOUNT \
                --name $DEPLOY_CONTAINER \
                --public-access off        

      - name: Upload DSC Package
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # remove invalid characters from storage account
            STORAGE_ACCOUNT=$(echo $STORAGE_ACCOUNT | tr -d -c 'a-z0-9')

            # Upload DSC configuration
            az storage blob upload \
                --account-name $STORAGE_ACCOUNT \
                --container-name $CONFIG_CONTAINER \
                --name ${{ env.CONFIG_PACKAGE }}-v${{ env.VERSION-PREFIX }}.${{ github.run_number }}.zip \
                --file ${{ env.PACKAGE_PATH }}/${{ env.CONFIG_PACKAGE }}.zip \
                --overwrite

      - name: Upload WebDeploy Package
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # remove invalid characters from storage account
            STORAGE_ACCOUNT=$(echo $STORAGE_ACCOUNT | tr -d -c 'a-z0-9')

            # Upload WebDeploy package
            az storage blob upload \
                --account-name $STORAGE_ACCOUNT \
                --container-name $DEPLOY_CONTAINER \
                --name ${{ env.DEPLOY_PACKAGE }}-v${{ env.VERSION-PREFIX }}.${{ github.run_number }}.zip \
                --file ${{ env.PACKAGE_PATH }}/${{ env.DEPLOY_PACKAGE }}.zip \
                --overwrite

  provision:
    needs: [environment, upload]
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.environment.outputs.name }}

    steps:
      - uses: actions/checkout@v2   
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Remove VM Extension
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # remove invalid characters from storage account
            az vm extension delete --resource-group $RESOURCE_GROUP --vm-name $VIRTUAL_MACHINE --name Microsoft.Powershell.DSC
        env:
          RESOURCE_GROUP: rg-${{ vars.AZURE_NAME }}-${{ vars.AZURE_SUFFIX }}-${{ vars.AZURE_LOCATION }}
          VIRTUAL_MACHINE: vm-${{ vars.AZURE_NAME }}-${{ vars.AZURE_SUFFIX }}

      - name: Deploy
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # provision infrastructure
            az deployment sub create \
                --name ${{ vars.AZURE_NAME }} \
                --location ${{ vars.AZURE_LOCATION }} \
                --template-file ./iac/main.bicep \
                --parameters name=${{ vars.AZURE_NAME }} \
                            location=${{ vars.AZURE_LOCATION }} \
                            uniqueSuffix=${{ vars.AZURE_SUFFIX }} \
                            adminUsername=${{ secrets.AZURE_USERNAME }} \
                            adminPassword=${{ secrets.AZURE_PASSWORD }} \
                            version=${{ env.VERSION-PREFIX }}.${{ github.run_number }} \
                            decryptionKey=${{ secrets.DECRYPTION_KEY }} \
                            validationKey=${{ secrets.VALIDATION_KEY }}