# This workflow deploys the full solution

name: Provision Infrastructure

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev
      - develop
      - 'features/*'
    paths:
      - 'iac/**'

jobs:

  environment:
    name: Determine Environment Name
    uses: ./.github/workflows/environment.yaml     

  validate:
    needs: [environment]
    name: Validate Environment Configuration
    uses: ./.github/workflows/validate.yaml
    with:
      environment: ${{ needs.environment.outputs.name }}
    secrets: 
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  package:
    needs: [validate]
    name: Package DSC Configuration
    runs-on: windows-latest
    environment: 
      name: ${{ needs.environment.outputs.name }}
    env:
      PACKAGE_PATH: .\package\dsc
      SITE_PATH: .\src

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Compile DSC Configuration
      run: |
        $ErrorActionPreference = 'Stop'
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module PSDesiredStateConfiguration
        Install-Module xWebAdministration
        Import-Module .\dsc\ServerConfiguration.ps1 -Force
        ServerConfiguration -siteName Poc -applicationPool Poc `
                    -packageUrl https://stg${{ vars.AZURE_NAME }}${{ vars.AZURE_SUFFIX }}.blob.core.windows.net/deployment/deploy.zip `
                    -packageName deploy.zip `
                    -decryptionKey '18F665CA29B4911B0C1755979C15F40466237BC9A101836A5AC6D1CE85D6B022' `
                    -validationKey '1E3D5BABF386E7A89DAE461DF2FA228734680C61' `
                    -OutputPath ${{ env.PACKAGE_PATH }}
        
        if (-not (Test-Path -Path ${{ env.PACKAGE_PATH }})) {
          throw "Compilation failed or no output was created"
        }

    - name: Zip DSC Configuration
      run: |
        # Create zip archive
        Compress-Archive -Path "${{ env.PACKAGE_PATH }}\*" -DestinationPath .\package\configure.zip

    - name: Create WebDeploy Package
      run: |
        # Get MSDeploy path
        $msdeploy = "C:\Program Files (x86)\IIS\Microsoft Web Deploy V3\msdeploy.exe";

        # Create WebDeploy package
        & $msdeploy '-verb:sync' `
              "-source:iisApp=$((Get-Item ${{ env.SITE_PATH }}).FullName),includeAcls=false,enable32BitAppOnWin64=false,managedPipelineMode=Integrated,managedRuntimeVersion=v4.0" `
              "-declareParamFile:$((Get-Item ${{ env.SITE_PATH }}).FullName)\parameters.xml" `
              "-dest:package=$((Get-Item ${{ env.PACKAGE_PATH }}).Parent.FullName)\deploy.zip";

    - name: Upload Package as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Package
        path: .\package\*

  provision:
    needs: [environment, package]
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.environment.outputs.name }}
    
    steps:
      - uses: actions/checkout@v2   
      - name: Download Package
        uses: actions/download-artifact@v2
        with:
          name: Package
          path: .\package\
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy
        uses: azure/CLI@v1
        with:
          inlineScript: |
            # provision infrastructure
            az deployment sub create \
                --name ${{ vars.AZURE_NAME }} \
                --location ${{ vars.AZURE_LOCATION }} \
                --template-file ./iac/main.bicep \
                --parameters name=${{ vars.AZURE_NAME }} \
                --parameters location=${{ vars.AZURE_LOCATION }} \
                --parameters uniqueSuffix=${{ vars.AZURE_SUFFIX }} \
                --parameters adminUsername=${{ secrets.AZURE_USERNAME }} \
                --parameters adminPassword=${{ secrets.AZURE_PASSWORD }}
